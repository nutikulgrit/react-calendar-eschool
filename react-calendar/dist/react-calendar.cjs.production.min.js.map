{"version":3,"file":"react-calendar.cjs.production.min.js","sources":["../src/Monthly/MonthlyCalendar.tsx","../src/shared.ts","../src/Monthly/MonthlyBody.tsx","../src/Weekly/WeeklyCalendar.tsx","../src/Monthly/MonthlyEventItems.tsx","../src/Weekly/WeeklyEventItems.tsx"],"sourcesContent":["import {\n  eachDayOfInterval,\n  startOfMonth,\n  endOfMonth,\n  format,\n  subMonths,\n  addMonths,\n  getYear,\n} from 'date-fns';\nimport React, { ReactNode, useContext } from 'react';\n\ntype CalendarState = {\n  days: Date[];\n  currentMonth: Date;\n  onCurrentMonthChange: (date: Date) => any;\n};\n\nconst MonthlyCalendarContext = React.createContext<CalendarState>(\n  {} as CalendarState\n);\n\nexport const useMonthlyCalendar = () => useContext(MonthlyCalendarContext);\n\ntype Props = {\n  children: ReactNode;\n  currentMonth: Date;\n  onCurrentMonthChange: (date: Date) => any;\n};\n\nexport const MonthlyCalendar = ({\n  currentMonth,\n  onCurrentMonthChange,\n  children,\n}: Props) => {\n  let monthStart = startOfMonth(currentMonth);\n  let days = eachDayOfInterval({\n    start: monthStart,\n    end: endOfMonth(monthStart),\n  });\n\n  return (\n    <MonthlyCalendarContext.Provider\n      value={{\n        days,\n        onCurrentMonthChange,\n        currentMonth: monthStart,\n      }}\n    >\n      {children}\n    </MonthlyCalendarContext.Provider>\n  );\n};\n\nexport const MonthlyNav = () => {\n  let { currentMonth, onCurrentMonthChange } = useMonthlyCalendar();\n\n  return (\n    <div className=\"flex justify-end mb-4\">\n      <button\n        onClick={() => onCurrentMonthChange(subMonths(currentMonth, 1))}\n        className=\"cursor-pointer\"\n      >\n        Previous\n      </button>\n      <div className=\"ml-4 mr-4 w-32 text-center\" aria-label=\"Current Month\">\n        {format(\n          currentMonth,\n          getYear(currentMonth) === getYear(new Date()) ? 'LLLL' : 'LLLL yyyy'\n        )}\n      </div>\n      <button\n        onClick={() => onCurrentMonthChange(addMonths(currentMonth, 1))}\n        className=\"cursor-pointer\"\n      >\n        Next\n      </button>\n    </div>\n  );\n};\n","export const daysInWeek = [\n  { day: 0, label: 'Sunday' },\n  { day: 1, label: 'Monday' },\n  { day: 2, label: 'Tuesday' },\n  { day: 3, label: 'Wednesday' },\n  { day: 4, label: 'Thursday' },\n  { day: 5, label: 'Friday' },\n  { day: 6, label: 'Saturday' },\n];\n","import React, { ReactNode, useContext } from 'react';\nimport { useMonthlyCalendar } from './MonthlyCalendar';\nimport { daysInWeek } from '../shared';\nimport { format, getDay, isSameDay } from 'date-fns';\n\nconst MonthlyBodyContext = React.createContext({} as any);\ntype BodyState<DayData> = {\n  day: Date;\n  events: DayData[];\n};\n\nexport function useMonthlyBody<DayData>() {\n  return useContext<BodyState<DayData>>(MonthlyBodyContext);\n}\n\ntype OmittedDaysProps = {\n  days: Date[];\n  omitDays?: number[];\n};\n\nexport const handleOmittedDays = ({ days, omitDays }: OmittedDaysProps) => {\n  let headings = daysInWeek;\n  let daysToRender = days;\n\n  //omit the headings and days of the week that were passed in\n  if (omitDays) {\n    headings = daysInWeek.filter(day => !omitDays.includes(day.day));\n    daysToRender = days.filter(day => !omitDays.includes(getDay(day)));\n  }\n\n  // omit the padding if an omitted day was before the start of the month\n  let firstDayOfMonth = getDay(daysToRender[0]) as number;\n  if (omitDays) {\n    let subtractOmittedDays = omitDays.filter(day => day < firstDayOfMonth)\n      .length;\n    firstDayOfMonth = firstDayOfMonth - subtractOmittedDays;\n  }\n  let padding = new Array(firstDayOfMonth).fill(0);\n\n  return { headings, daysToRender, padding };\n};\n\n//to prevent these from being purged in production, we make a lookup object\nconst headingClasses = {\n  l3: 'lg:grid-cols-3',\n  l4: 'lg:grid-cols-4',\n  l5: 'lg:grid-cols-5',\n  l6: 'lg:grid-cols-6',\n  l7: 'lg:grid-cols-7',\n};\n\ntype MonthlyBodyProps<DayData> = {\n  /*\n    skip days, an array of days, starts at sunday (0), saturday is 6\n    ex: [0,6] would remove sunday and saturday from rendering\n  */\n  omitDays?: number[];\n  events: (DayData & { date: Date })[];\n  children: ReactNode;\n};\n\nexport function MonthlyBody<DayData>({\n  omitDays,\n  events,\n  children,\n}: MonthlyBodyProps<DayData>) {\n  let { days } = useMonthlyCalendar();\n  let { headings, daysToRender, padding } = handleOmittedDays({\n    days,\n    omitDays,\n  });\n\n  let headingClassName = 'border-b-2 p-2 border-r-2 lg:block hidden';\n  return (\n    <div className=\"bg-white border-l-2 border-t-2\">\n      <div\n        className={`grid grid-cols-1 sm:grid-cols-2 md:grid-cols-4 ${\n          //@ts-ignore\n          headingClasses[`l${headings.length}`]\n        }`}\n      >\n        {headings.map(day => (\n          <div\n            key={day.day}\n            className={headingClassName}\n            aria-label=\"Day of Week\"\n          >\n            {day.label}\n          </div>\n        ))}\n        {padding.map((_, index) => (\n          <div\n            key={index}\n            className={headingClassName}\n            aria-label=\"Empty Day\"\n          />\n        ))}\n        {daysToRender.map(day => (\n          <MonthlyBodyContext.Provider\n            key={day.toISOString()}\n            value={{\n              day,\n              events: events.filter(data => isSameDay(data.date, day)),\n            }}\n          >\n            {children}\n          </MonthlyBodyContext.Provider>\n        ))}\n      </div>\n    </div>\n  );\n}\n\ntype MonthlyDayProps<DayData> = {\n  renderDay: (events: DayData[]) => ReactNode;\n};\nexport function MonthlyDay<DayData>({ renderDay }: MonthlyDayProps<DayData>) {\n  let { day, events } = useMonthlyBody<DayData>();\n  let dayNumber = format(day, 'd');\n\n  return (\n    <div\n      aria-label={`Events for day ${dayNumber}`}\n      className=\"h-48 p-2 border-b-2 border-r-2\"\n    >\n      <div className=\"flex justify-between\">\n        <div className=\"font-bold\">{dayNumber}</div>\n        <div className=\"lg:hidden block\">{format(day, 'EEEE')}</div>\n      </div>\n      <ul className=\"divide-gray-200 divide-y overflow-hidden max-h-36 overflow-y-auto\">\n        {renderDay(events)}\n      </ul>\n    </div>\n  );\n}\n","import {\n  startOfWeek,\n  format,\n  isSameDay,\n  getDay,\n  setDay,\n  isSameWeek,\n} from 'date-fns';\nimport React, {\n  CSSProperties,\n  ReactNode,\n  useContext,\n  useEffect,\n  useState,\n} from 'react';\nimport { daysInWeek } from '../shared';\n\ntype State = {\n  week: Date;\n  selectedDay?: Date;\n  changeSelectedDay: (day?: Date) => any;\n};\n\nconst WeeklyContext = React.createContext<State>({} as State);\nexport const useWeeklyCalendar = () => useContext(WeeklyContext);\n\ntype WeeklyCalendarProps = {\n  week: Date;\n  children: ReactNode;\n};\n\nexport const WeeklyCalendar = ({ week, children }: WeeklyCalendarProps) => {\n  let [selectedDay, setSelectedDay] = useState<Date>();\n\n  //clear the selected day if the week changes\n  useEffect(() => {\n    setSelectedDay(undefined);\n  }, [week]);\n\n  return (\n    <WeeklyContext.Provider\n      value={{\n        selectedDay,\n        week: startOfWeek(week),\n        changeSelectedDay: setSelectedDay,\n      }}\n    >\n      {children}\n    </WeeklyContext.Provider>\n  );\n};\n\ntype WeeklyContainerProps = {\n  children: ReactNode;\n};\nexport const WeeklyContainer = ({ children }: WeeklyContainerProps) => {\n  return <div className=\"md:flex md:justify-between\">{children}</div>;\n};\n\ntype DayButtonProps = {\n  day: { day: number; label: string };\n};\n\nconst DayButton = ({ day }: DayButtonProps) => {\n  let { week, selectedDay, changeSelectedDay } = useWeeklyCalendar();\n  let isSelected = selectedDay ? getDay(selectedDay) === day.day : false;\n  let currentDate = setDay(week, day.day);\n  return (\n    <li\n      onClick={() => changeSelectedDay(isSelected ? undefined : currentDate)}\n      className=\"bg-white cursor-pointer\"\n      aria-label=\"Day of Week\"\n    >\n      <div\n        className={`rounded-lg border sm:w-36 text-center py-4 ${\n          isSelected\n            ? 'border-indigo-600'\n            : 'border-gray-300 hover:border-gray-500'\n        }`}\n      >\n        <p className=\"font-medium text-sm text-gray-800\">\n          {day.label} {format(currentDate, 'do')}\n        </p>\n      </div>\n    </li>\n  );\n};\n\ntype WeeklyDaysProps = {\n  omitDays?: number[];\n};\n\nexport const WeeklyDays = ({ omitDays }: WeeklyDaysProps) => {\n  let daysToRender = daysInWeek;\n\n  if (omitDays) {\n    daysToRender = daysInWeek.filter((day) => !omitDays.includes(day.day));\n  }\n  return (\n    <ul className=\"grid md:grid-cols-1 grid-cols-2 gap-2\">\n      {daysToRender.map((day) => (\n        <DayButton key={day.day} day={day} />\n      ))}\n    </ul>\n  );\n};\n\ntype RenderItemProps<EventItem> = {\n  item: EventItem & { date: Date };\n  /*\n    boolean indicating if a full week is being shwown\n    vs having a single day selected\n  */\n  showingFullWeek: boolean;\n};\n\ntype WeeklyBodyProps<EventItem> = {\n  style?: CSSProperties;\n  events: (EventItem & { date: Date })[];\n  renderItem: (item: RenderItemProps<EventItem>) => ReactNode;\n};\n\nexport function WeeklyBody<EventItem>({\n  events,\n  renderItem,\n  style,\n}: WeeklyBodyProps<EventItem>) {\n  let { week, selectedDay } = useWeeklyCalendar();\n  return (\n    <div className=\"overflow-auto max-h-96\" style={style}>\n      <ul className=\"divide-y divide-gray-200 \">\n        {events.map((item) => {\n          // If they select a single day, filter out events for different days\n          if (selectedDay) {\n            if (!isSameDay(selectedDay, item.date)) return null;\n          }\n          //if an event is for a different week, filter it out\n          if (!isSameWeek(week, item.date)) return null;\n\n          //return the remeaining events!\n          return renderItem({\n            item,\n            showingFullWeek: selectedDay === undefined,\n          });\n        })}\n      </ul>\n    </div>\n  );\n}\n\nexport const WeeklyResponsiveContainer = ({\n  children,\n}: {\n  children: ReactNode;\n}) => {\n  return <div className=\"border p-4 md:w-3/4 lg:w-1/2 w-full\">{children}</div>;\n};\n","import React from 'react';\n\n/*\n  Over time there may be more useful event item components that can be included\n  in the library\n*/\n\ntype DefaultEventItemProps = {\n  title: string;\n  date: string;\n};\n\nexport const DefaultMonthlyEventItem = ({\n  title,\n  date,\n}: DefaultEventItemProps) => {\n  return (\n    <li className=\"py-2\">\n      <div className=\"flex text-sm flex-1 justify-between\">\n        <h3 className=\"font-medium\">{title}</h3>\n        <p className=\"text-gray-500\">{date}</p>\n      </div>\n    </li>\n  );\n};\n","import React from 'react';\n\n/*\n  Over time there may be more useful event item components that can be included\n  in the library\n*/\n\ntype DefaultWeeklyEventItemProps = {\n  title: string;\n  date: string;\n};\n\nexport const DefaultWeeklyEventItem = ({\n  title,\n  date,\n}: DefaultWeeklyEventItemProps) => {\n  return (\n    <li className=\"py-4 w-72\">\n      <div className=\"text-sm flex justify-between\">\n        <h3 className=\"font-medium\">{title}</h3>\n        <p className=\"text-gray-500\">{date}</p>\n      </div>\n    </li>\n  );\n};\n"],"names":["MonthlyCalendarContext","React","createContext","useMonthlyCalendar","useContext","daysInWeek","day","label","MonthlyBodyContext","useMonthlyBody","handleOmittedDays","days","omitDays","headings","daysToRender","filter","includes","getDay","firstDayOfMonth","subtractOmittedDays","length","padding","Array","fill","headingClasses","l3","l4","l5","l6","l7","WeeklyContext","useWeeklyCalendar","DayButton","week","selectedDay","changeSelectedDay","isSelected","currentDate","setDay","onClick","undefined","className","format","date","title","events","children","map","key","_","index","Provider","toISOString","value","data","isSameDay","onCurrentMonthChange","monthStart","startOfMonth","currentMonth","eachDayOfInterval","start","end","endOfMonth","renderDay","dayNumber","subMonths","getYear","Date","addMonths","renderItem","style","item","isSameWeek","showingFullWeek","useState","setSelectedDay","useEffect","startOfWeek"],"mappings":"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"}